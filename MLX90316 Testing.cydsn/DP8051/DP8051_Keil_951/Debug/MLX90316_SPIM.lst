C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MLX90316_SPIM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\MLX90316_SPIM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\MLX90316_SPIM.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(
                    -DEBUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/MLX90316_SPIM.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\MLX903
                    -16_SPIM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: MLX90316_SPIM.c
   3          * Version 2.50
   4          *
   5          * Description:
   6          *  This file provides all API functionality of the SPI Master component.
   7          *
   8          * Note:
   9          *  None.
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "MLX90316_SPIM_PVT.h"
  19          
  20          #if(MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED)
  21              volatile uint8 MLX90316_SPIM_txBuffer[MLX90316_SPIM_TX_BUFFER_SIZE];
  22              volatile uint8 MLX90316_SPIM_txBufferFull;
  23              volatile uint8 MLX90316_SPIM_txBufferRead;
  24              volatile uint8 MLX90316_SPIM_txBufferWrite;
  25          #endif /* (MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED) */
  26          
  27          #if(MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED)
  28              volatile uint8 MLX90316_SPIM_rxBuffer[MLX90316_SPIM_RX_BUFFER_SIZE];
  29              volatile uint8 MLX90316_SPIM_rxBufferFull;
  30              volatile uint8 MLX90316_SPIM_rxBufferRead;
  31              volatile uint8 MLX90316_SPIM_rxBufferWrite;
  32          #endif /* (MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED) */
  33          
  34          uint8 MLX90316_SPIM_initVar = 0u;
  35          
  36          volatile uint8 MLX90316_SPIM_swStatusTx;
  37          volatile uint8 MLX90316_SPIM_swStatusRx;
  38          
  39          
  40          /*******************************************************************************
  41          * Function Name: MLX90316_SPIM_Init
  42          ********************************************************************************
  43          *
  44          * Summary:
  45          *  Inits/Restores default SPIM configuration provided with customizer.
  46          *
  47          * Parameters:
  48          *  None.
  49          *
  50          * Return:
  51          *  None.
  52          *
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 2   

  53          * Side Effects:
  54          *  When this function is called it initializes all of the necessary parameters
  55          *  for execution. i.e. setting the initial interrupt mask, configuring the
  56          *  interrupt service routine, configuring the bit-counter parameters and
  57          *  clearing the FIFO and Status Register.
  58          *
  59          * Reentrant:
  60          *  No.
  61          *
  62          *******************************************************************************/
  63          void MLX90316_SPIM_Init(void) 
  64          {
  65   1          /* Initialize the Bit counter */
  66   1          MLX90316_SPIM_COUNTER_PERIOD_REG = MLX90316_SPIM_BITCTR_INIT;
  67   1      
  68   1          /* Init TX ISR  */
  69   1          #if(0u != MLX90316_SPIM_INTERNAL_TX_INT_ENABLED)
  70   1              CyIntDisable         (MLX90316_SPIM_TX_ISR_NUMBER);
  71   1              CyIntSetPriority     (MLX90316_SPIM_TX_ISR_NUMBER,  MLX90316_SPIM_TX_ISR_PRIORITY);
  72   1              (void) CyIntSetVector(MLX90316_SPIM_TX_ISR_NUMBER, &MLX90316_SPIM_TX_ISR);
  73   1          #endif /* (0u != MLX90316_SPIM_INTERNAL_TX_INT_ENABLED) */
  74   1      
  75   1          /* Init RX ISR  */
  76   1          #if(0u != MLX90316_SPIM_INTERNAL_RX_INT_ENABLED)
  77   1              CyIntDisable         (MLX90316_SPIM_RX_ISR_NUMBER);
  78   1              CyIntSetPriority     (MLX90316_SPIM_RX_ISR_NUMBER,  MLX90316_SPIM_RX_ISR_PRIORITY);
  79   1              (void) CyIntSetVector(MLX90316_SPIM_RX_ISR_NUMBER, &MLX90316_SPIM_RX_ISR);
  80   1          #endif /* (0u != MLX90316_SPIM_INTERNAL_RX_INT_ENABLED) */
  81   1      
  82   1          /* Clear any stray data from the RX and TX FIFO */
  83   1          MLX90316_SPIM_ClearFIFO();
  84   1      
  85   1          #if(MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED)
  86   1              MLX90316_SPIM_rxBufferFull  = 0u;
  87   1              MLX90316_SPIM_rxBufferRead  = 0u;
  88   1              MLX90316_SPIM_rxBufferWrite = 0u;
  89   1          #endif /* (MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED) */
  90   1      
  91   1          #if(MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED)
  92   1              MLX90316_SPIM_txBufferFull  = 0u;
  93   1              MLX90316_SPIM_txBufferRead  = 0u;
  94   1              MLX90316_SPIM_txBufferWrite = 0u;
  95   1          #endif /* (MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED) */
  96   1      
  97   1          (void) MLX90316_SPIM_ReadTxStatus(); /* Clear Tx status and swStatusTx */
  98   1          (void) MLX90316_SPIM_ReadRxStatus(); /* Clear Rx status and swStatusRx */
  99   1      
 100   1          /* Configure TX and RX interrupt mask */
 101   1          MLX90316_SPIM_TX_STATUS_MASK_REG = MLX90316_SPIM_TX_INIT_INTERRUPTS_MASK;
 102   1          MLX90316_SPIM_RX_STATUS_MASK_REG = MLX90316_SPIM_RX_INIT_INTERRUPTS_MASK;
 103   1      }
 104          
 105          
 106          /*******************************************************************************
 107          * Function Name: MLX90316_SPIM_Enable
 108          ********************************************************************************
 109          *
 110          * Summary:
 111          *  Enable SPIM component.
 112          *
 113          * Parameters:
 114          *  None.
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 3   

 115          *
 116          * Return:
 117          *  None.
 118          *
 119          *******************************************************************************/
 120          void MLX90316_SPIM_Enable(void) 
 121          {
 122   1          uint8 enableInterrupts;
 123   1      
 124   1          enableInterrupts = CyEnterCriticalSection();
 125   1          MLX90316_SPIM_COUNTER_CONTROL_REG |= MLX90316_SPIM_CNTR_ENABLE;
 126   1          MLX90316_SPIM_TX_STATUS_ACTL_REG  |= MLX90316_SPIM_INT_ENABLE;
 127   1          MLX90316_SPIM_RX_STATUS_ACTL_REG  |= MLX90316_SPIM_INT_ENABLE;
 128   1          CyExitCriticalSection(enableInterrupts);
 129   1      
 130   1          #if(0u != MLX90316_SPIM_INTERNAL_CLOCK)
                      MLX90316_SPIM_IntClock_Enable();
                  #endif /* (0u != MLX90316_SPIM_INTERNAL_CLOCK) */
 133   1      
 134   1          MLX90316_SPIM_EnableTxInt();
 135   1          MLX90316_SPIM_EnableRxInt();
 136   1      }
 137          
 138          
 139          /*******************************************************************************
 140          * Function Name: MLX90316_SPIM_Start
 141          ********************************************************************************
 142          *
 143          * Summary:
 144          *  Initialize and Enable the SPI Master component.
 145          *
 146          * Parameters:
 147          *  None.
 148          *
 149          * Return:
 150          *  None.
 151          *
 152          * Global variables:
 153          *  MLX90316_SPIM_initVar - used to check initial configuration, modified on
 154          *  first function call.
 155          *
 156          * Theory:
 157          *  Enable the clock input to enable operation.
 158          *
 159          * Reentrant:
 160          *  No.
 161          *
 162          *******************************************************************************/
 163          void MLX90316_SPIM_Start(void) 
 164          {
 165   1          if(0u == MLX90316_SPIM_initVar)
 166   1          {
 167   2              MLX90316_SPIM_Init();
 168   2              MLX90316_SPIM_initVar = 1u;
 169   2          }
 170   1      
 171   1          MLX90316_SPIM_Enable();
 172   1      }
 173          
 174          
 175          /*******************************************************************************
 176          * Function Name: MLX90316_SPIM_Stop
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 4   

 177          ********************************************************************************
 178          *
 179          * Summary:
 180          *  Disable the SPI Master component.
 181          *
 182          * Parameters:
 183          *  None.
 184          *
 185          * Return:
 186          *  None.
 187          *
 188          * Theory:
 189          *  Disable the clock input to enable operation.
 190          *
 191          *******************************************************************************/
 192          void MLX90316_SPIM_Stop(void) 
 193          {
 194   1          uint8 enableInterrupts;
 195   1      
 196   1          enableInterrupts = CyEnterCriticalSection();
 197   1          MLX90316_SPIM_TX_STATUS_ACTL_REG &= ((uint8) ~MLX90316_SPIM_INT_ENABLE);
 198   1          MLX90316_SPIM_RX_STATUS_ACTL_REG &= ((uint8) ~MLX90316_SPIM_INT_ENABLE);
 199   1          CyExitCriticalSection(enableInterrupts);
 200   1      
 201   1          #if(0u != MLX90316_SPIM_INTERNAL_CLOCK)
                      MLX90316_SPIM_IntClock_Disable();
                  #endif /* (0u != MLX90316_SPIM_INTERNAL_CLOCK) */
 204   1      
 205   1          MLX90316_SPIM_DisableTxInt();
 206   1          MLX90316_SPIM_DisableRxInt();
 207   1      }
 208          
 209          
 210          /*******************************************************************************
 211          * Function Name: MLX90316_SPIM_EnableTxInt
 212          ********************************************************************************
 213          *
 214          * Summary:
 215          *  Enable internal Tx interrupt generation.
 216          *
 217          * Parameters:
 218          *  None.
 219          *
 220          * Return:
 221          *  None.
 222          *
 223          * Theory:
 224          *  Enable the internal Tx interrupt output -or- the interrupt component itself.
 225          *
 226          *******************************************************************************/
 227          void MLX90316_SPIM_EnableTxInt(void) 
 228          {
 229   1          #if(0u != MLX90316_SPIM_INTERNAL_TX_INT_ENABLED)
 230   1              CyIntEnable(MLX90316_SPIM_TX_ISR_NUMBER);
 231   1          #endif /* (0u != MLX90316_SPIM_INTERNAL_TX_INT_ENABLED) */
 232   1      }
 233          
 234          
 235          /*******************************************************************************
 236          * Function Name: MLX90316_SPIM_EnableRxInt
 237          ********************************************************************************
 238          *
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 5   

 239          * Summary:
 240          *  Enable internal Rx interrupt generation.
 241          *
 242          * Parameters:
 243          *  None.
 244          *
 245          * Return:
 246          *  None.
 247          *
 248          * Theory:
 249          *  Enable the internal Rx interrupt output -or- the interrupt component itself.
 250          *
 251          *******************************************************************************/
 252          void MLX90316_SPIM_EnableRxInt(void) 
 253          {
 254   1          #if(0u != MLX90316_SPIM_INTERNAL_RX_INT_ENABLED)
 255   1              CyIntEnable(MLX90316_SPIM_RX_ISR_NUMBER);
 256   1          #endif /* (0u != MLX90316_SPIM_INTERNAL_RX_INT_ENABLED) */
 257   1      }
 258          
 259          
 260          /*******************************************************************************
 261          * Function Name: MLX90316_SPIM_DisableTxInt
 262          ********************************************************************************
 263          *
 264          * Summary:
 265          *  Disable internal Tx interrupt generation.
 266          *
 267          * Parameters:
 268          *  None.
 269          *
 270          * Return:
 271          *  None.
 272          *
 273          * Theory:
 274          *  Disable the internal Tx interrupt output -or- the interrupt component itself.
 275          *
 276          *******************************************************************************/
 277          void MLX90316_SPIM_DisableTxInt(void) 
 278          {
 279   1          #if(0u != MLX90316_SPIM_INTERNAL_TX_INT_ENABLED)
 280   1              CyIntDisable(MLX90316_SPIM_TX_ISR_NUMBER);
 281   1          #endif /* (0u != MLX90316_SPIM_INTERNAL_TX_INT_ENABLED) */
 282   1      }
 283          
 284          
 285          /*******************************************************************************
 286          * Function Name: MLX90316_SPIM_DisableRxInt
 287          ********************************************************************************
 288          *
 289          * Summary:
 290          *  Disable internal Rx interrupt generation.
 291          *
 292          * Parameters:
 293          *  None.
 294          *
 295          * Return:
 296          *  None.
 297          *
 298          * Theory:
 299          *  Disable the internal Rx interrupt output -or- the interrupt component itself.
 300          *
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 6   

 301          *******************************************************************************/
 302          void MLX90316_SPIM_DisableRxInt(void) 
 303          {
 304   1          #if(0u != MLX90316_SPIM_INTERNAL_RX_INT_ENABLED)
 305   1              CyIntDisable(MLX90316_SPIM_RX_ISR_NUMBER);
 306   1          #endif /* (0u != MLX90316_SPIM_INTERNAL_RX_INT_ENABLED) */
 307   1      }
 308          
 309          
 310          /*******************************************************************************
 311          * Function Name: MLX90316_SPIM_SetTxInterruptMode
 312          ********************************************************************************
 313          *
 314          * Summary:
 315          *  Configure which status bits trigger an interrupt event.
 316          *
 317          * Parameters:
 318          *  intSrc: An or'd combination of the desired status bit masks (defined in the
 319          *  header file).
 320          *
 321          * Return:
 322          *  None.
 323          *
 324          * Theory:
 325          *  Enables the output of specific status bits to the interrupt controller.
 326          *
 327          *******************************************************************************/
 328          void MLX90316_SPIM_SetTxInterruptMode(uint8 intSrc) 
 329          {
 330   1          MLX90316_SPIM_TX_STATUS_MASK_REG = intSrc;
 331   1      }
 332          
 333          
 334          /*******************************************************************************
 335          * Function Name: MLX90316_SPIM_SetRxInterruptMode
 336          ********************************************************************************
 337          *
 338          * Summary:
 339          *  Configure which status bits trigger an interrupt event.
 340          *
 341          * Parameters:
 342          *  intSrc: An or'd combination of the desired status bit masks (defined in the
 343          *  header file).
 344          *
 345          * Return:
 346          *  None.
 347          *
 348          * Theory:
 349          *  Enables the output of specific status bits to the interrupt controller.
 350          *
 351          *******************************************************************************/
 352          void MLX90316_SPIM_SetRxInterruptMode(uint8 intSrc) 
 353          {
 354   1          MLX90316_SPIM_RX_STATUS_MASK_REG  = intSrc;
 355   1      }
 356          
 357          
 358          /*******************************************************************************
 359          * Function Name: MLX90316_SPIM_ReadTxStatus
 360          ********************************************************************************
 361          *
 362          * Summary:
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 7   

 363          *  Read the Tx status register for the component.
 364          *
 365          * Parameters:
 366          *  None.
 367          *
 368          * Return:
 369          *  Contents of the Tx status register.
 370          *
 371          * Global variables:
 372          *  MLX90316_SPIM_swStatusTx - used to store in software status register,
 373          *  modified every function call - resets to zero.
 374          *
 375          * Theory:
 376          *  Allows the user and the API to read the Tx status register for error
 377          *  detection and flow control.
 378          *
 379          * Side Effects:
 380          *  Clear Tx status register of the component.
 381          *
 382          * Reentrant:
 383          *  No.
 384          *
 385          *******************************************************************************/
 386          uint8 MLX90316_SPIM_ReadTxStatus(void) 
 387          {
 388   1          uint8 tmpStatus;
 389   1      
 390   1          #if(MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED)
 391   1              /* Disable TX interrupt to protect global veriables */
 392   1              MLX90316_SPIM_DisableTxInt();
 393   1      
 394   1              tmpStatus = MLX90316_SPIM_GET_STATUS_TX(MLX90316_SPIM_swStatusTx);
 395   1              MLX90316_SPIM_swStatusTx = 0u;
 396   1      
 397   1              MLX90316_SPIM_EnableTxInt();
 398   1      
 399   1          #else
              
                      tmpStatus = MLX90316_SPIM_TX_STATUS_REG;
              
                  #endif /* (MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED) */
 404   1      
 405   1          return(tmpStatus);
 406   1      }
 407          
 408          
 409          /*******************************************************************************
 410          * Function Name: MLX90316_SPIM_ReadRxStatus
 411          ********************************************************************************
 412          *
 413          * Summary:
 414          *  Read the Rx status register for the component.
 415          *
 416          * Parameters:
 417          *  None.
 418          *
 419          * Return:
 420          *  Contents of the Rx status register.
 421          *
 422          * Global variables:
 423          *  MLX90316_SPIM_swStatusRx - used to store in software Rx status register,
 424          *  modified every function call - resets to zero.
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 8   

 425          *
 426          * Theory:
 427          *  Allows the user and the API to read the Rx status register for error
 428          *  detection and flow control.
 429          *
 430          * Side Effects:
 431          *  Clear Rx status register of the component.
 432          *
 433          * Reentrant:
 434          *  No.
 435          *
 436          *******************************************************************************/
 437          uint8 MLX90316_SPIM_ReadRxStatus(void) 
 438          {
 439   1          uint8 tmpStatus;
 440   1      
 441   1          #if(MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED)
 442   1              /* Disable RX interrupt to protect global veriables */
 443   1              MLX90316_SPIM_DisableRxInt();
 444   1      
 445   1              tmpStatus = MLX90316_SPIM_GET_STATUS_RX(MLX90316_SPIM_swStatusRx);
 446   1              MLX90316_SPIM_swStatusRx = 0u;
 447   1      
 448   1              MLX90316_SPIM_EnableRxInt();
 449   1      
 450   1          #else
              
                      tmpStatus = MLX90316_SPIM_RX_STATUS_REG;
              
                  #endif /* (MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED) */
 455   1      
 456   1          return(tmpStatus);
 457   1      }
 458          
 459          
 460          /*******************************************************************************
 461          * Function Name: MLX90316_SPIM_WriteTxData
 462          ********************************************************************************
 463          *
 464          * Summary:
 465          *  Write a byte of data to be sent across the SPI.
 466          *
 467          * Parameters:
 468          *  txDataByte: The data value to send across the SPI.
 469          *
 470          * Return:
 471          *  None.
 472          *
 473          * Global variables:
 474          *  MLX90316_SPIM_txBufferWrite - used for the account of the bytes which
 475          *  have been written down in the TX software buffer, modified every function
 476          *  call if TX Software Buffer is used.
 477          *  MLX90316_SPIM_txBufferRead - used for the account of the bytes which
 478          *  have been read from the TX software buffer.
 479          *  MLX90316_SPIM_txBuffer[MLX90316_SPIM_TX_BUFFER_SIZE] - used to store
 480          *  data to sending, modified every function call if TX Software Buffer is used.
 481          *
 482          * Theory:
 483          *  Allows the user to transmit any byte of data in a single transfer.
 484          *
 485          * Side Effects:
 486          *  If this function is called again before the previous byte is finished then
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 9   

 487          *  the next byte will be appended to the transfer with no time between
 488          *  the byte transfers. Clear Tx status register of the component.
 489          *
 490          * Reentrant:
 491          *  No.
 492          *
 493          *******************************************************************************/
 494          void MLX90316_SPIM_WriteTxData(uint8 txData) 
 495          {
 496   1          #if(MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED)
 497   1      
 498   1              uint8 tempStatus;
 499   1              uint8 tmpTxBufferRead;
 500   1      
 501   1              /* Block if TX buffer is FULL: don't overwrite */
 502   1              do
 503   1              {
 504   2                  tmpTxBufferRead = MLX90316_SPIM_txBufferRead;
 505   2                  if(0u == tmpTxBufferRead)
 506   2                  {
 507   3                      tmpTxBufferRead = (MLX90316_SPIM_TX_BUFFER_SIZE - 1u);
 508   3                  }
 509   2                  else
 510   2                  {
 511   3                      tmpTxBufferRead--;
 512   3                  }
 513   2      
 514   2              }while(tmpTxBufferRead == MLX90316_SPIM_txBufferWrite);
 515   1      
 516   1              /* Disable TX interrupt to protect global veriables */
 517   1              MLX90316_SPIM_DisableTxInt();
 518   1      
 519   1              tempStatus = MLX90316_SPIM_GET_STATUS_TX(MLX90316_SPIM_swStatusTx);
 520   1              MLX90316_SPIM_swStatusTx = tempStatus;
 521   1      
 522   1      
 523   1              if((MLX90316_SPIM_txBufferRead == MLX90316_SPIM_txBufferWrite) &&
 524   1                 (0u != (MLX90316_SPIM_swStatusTx & MLX90316_SPIM_STS_TX_FIFO_NOT_FULL)))
 525   1              {
 526   2                  /* Put data element into the TX FIFO */
 527   2                  CY_SET_REG8(MLX90316_SPIM_TXDATA_PTR, txData);
 528   2              }
 529   1              else
 530   1              {
 531   2                  /* Add to the TX software buffer */
 532   2                  MLX90316_SPIM_txBufferWrite++;
 533   2                  if(MLX90316_SPIM_txBufferWrite >= MLX90316_SPIM_TX_BUFFER_SIZE)
 534   2                  {
 535   3                      MLX90316_SPIM_txBufferWrite = 0u;
 536   3                  }
 537   2      
 538   2                  if(MLX90316_SPIM_txBufferWrite == MLX90316_SPIM_txBufferRead)
 539   2                  {
 540   3                      MLX90316_SPIM_txBufferRead++;
 541   3                      if(MLX90316_SPIM_txBufferRead >= MLX90316_SPIM_TX_BUFFER_SIZE)
 542   3                      {
 543   4                          MLX90316_SPIM_txBufferRead = 0u;
 544   4                      }
 545   3                      MLX90316_SPIM_txBufferFull = 1u;
 546   3                  }
 547   2      
 548   2                  MLX90316_SPIM_txBuffer[MLX90316_SPIM_txBufferWrite] = txData;
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 10  

 549   2      
 550   2                  MLX90316_SPIM_TX_STATUS_MASK_REG |= MLX90316_SPIM_STS_TX_FIFO_NOT_FULL;
 551   2              }
 552   1      
 553   1              MLX90316_SPIM_EnableTxInt();
 554   1      
 555   1          #else
                      /* Wait until TX FIFO has a place */
                      while(0u == (MLX90316_SPIM_TX_STATUS_REG & MLX90316_SPIM_STS_TX_FIFO_NOT_FULL))
                      {
                      }
              
                      /* Put data element into the TX FIFO */
                      CY_SET_REG8(MLX90316_SPIM_TXDATA_PTR, txData);
              
                  #endif /* (MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED) */
 565   1      }
 566          
 567          
 568          /*******************************************************************************
 569          * Function Name: MLX90316_SPIM_ReadRxData
 570          ********************************************************************************
 571          *
 572          * Summary:
 573          *  Read the next byte of data received across the SPI.
 574          *
 575          * Parameters:
 576          *  None.
 577          *
 578          * Return:
 579          *  The next byte of data read from the FIFO.
 580          *
 581          * Global variables:
 582          *  MLX90316_SPIM_rxBufferWrite - used for the account of the bytes which
 583          *  have been written down in the RX software buffer.
 584          *  MLX90316_SPIM_rxBufferRead - used for the account of the bytes which
 585          *  have been read from the RX software buffer, modified every function
 586          *  call if RX Software Buffer is used.
 587          *  MLX90316_SPIM_rxBuffer[MLX90316_SPIM_RX_BUFFER_SIZE] - used to store
 588          *  received data.
 589          *
 590          * Theory:
 591          *  Allows the user to read a byte of data received.
 592          *
 593          * Side Effects:
 594          *  Will return invalid data if the FIFO is empty. The user should Call
 595          *  GetRxBufferSize() and if it returns a non-zero value then it is safe to call
 596          *  ReadByte() function.
 597          *
 598          * Reentrant:
 599          *  No.
 600          *
 601          *******************************************************************************/
 602          uint8 MLX90316_SPIM_ReadRxData(void) 
 603          {
 604   1          uint8 rxData;
 605   1      
 606   1          #if(MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED)
 607   1      
 608   1              /* Disable RX interrupt to protect global veriables */
 609   1              MLX90316_SPIM_DisableRxInt();
 610   1      
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 11  

 611   1              if(MLX90316_SPIM_rxBufferRead != MLX90316_SPIM_rxBufferWrite)
 612   1              {
 613   2                  if(0u == MLX90316_SPIM_rxBufferFull)
 614   2                  {
 615   3                      MLX90316_SPIM_rxBufferRead++;
 616   3                      if(MLX90316_SPIM_rxBufferRead >= MLX90316_SPIM_RX_BUFFER_SIZE)
 617   3                      {
 618   4                          MLX90316_SPIM_rxBufferRead = 0u;
 619   4                      }
 620   3                  }
 621   2                  else
 622   2                  {
 623   3                      MLX90316_SPIM_rxBufferFull = 0u;
 624   3                  }
 625   2              }
 626   1      
 627   1              rxData = MLX90316_SPIM_rxBuffer[MLX90316_SPIM_rxBufferRead];
 628   1      
 629   1              MLX90316_SPIM_EnableRxInt();
 630   1      
 631   1          #else
              
                      rxData = CY_GET_REG8(MLX90316_SPIM_RXDATA_PTR);
              
                  #endif /* (MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED) */
 636   1      
 637   1          return(rxData);
 638   1      }
 639          
 640          
 641          /*******************************************************************************
 642          * Function Name: MLX90316_SPIM_GetRxBufferSize
 643          ********************************************************************************
 644          *
 645          * Summary:
 646          *  Returns the number of bytes/words of data currently held in the RX buffer.
 647          *  If RX Software Buffer not used then function return 0 if FIFO empty or 1 if
 648          *  FIFO not empty. In another case function return size of RX Software Buffer.
 649          *
 650          * Parameters:
 651          *  None.
 652          *
 653          * Return:
 654          *  Integer count of the number of bytes/words in the RX buffer.
 655          *
 656          * Global variables:
 657          *  MLX90316_SPIM_rxBufferWrite - used for the account of the bytes which
 658          *  have been written down in the RX software buffer.
 659          *  MLX90316_SPIM_rxBufferRead - used for the account of the bytes which
 660          *  have been read from the RX software buffer.
 661          *
 662          * Side Effects:
 663          *  Clear status register of the component.
 664          *
 665          *******************************************************************************/
 666          uint8 MLX90316_SPIM_GetRxBufferSize(void) 
 667          {
 668   1          uint8 size;
 669   1      
 670   1          #if(MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED)
 671   1      
 672   1              /* Disable RX interrupt to protect global veriables */
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 12  

 673   1              MLX90316_SPIM_DisableRxInt();
 674   1      
 675   1              if(MLX90316_SPIM_rxBufferRead == MLX90316_SPIM_rxBufferWrite)
 676   1              {
 677   2                  size = 0u;
 678   2              }
 679   1              else if(MLX90316_SPIM_rxBufferRead < MLX90316_SPIM_rxBufferWrite)
 680   1              {
 681   2                  size = (MLX90316_SPIM_rxBufferWrite - MLX90316_SPIM_rxBufferRead);
 682   2              }
 683   1              else
 684   1              {
 685   2                  size = (MLX90316_SPIM_RX_BUFFER_SIZE - MLX90316_SPIM_rxBufferRead) + MLX90316_SPIM_rxBufferWri
             -te;
 686   2              }
 687   1      
 688   1              MLX90316_SPIM_EnableRxInt();
 689   1      
 690   1          #else
              
                      /* We can only know if there is data in the RX FIFO */
                      size = (0u != (MLX90316_SPIM_RX_STATUS_REG & MLX90316_SPIM_STS_RX_FIFO_NOT_EMPTY)) ? 1u : 0u;
              
                  #endif /* (MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED) */
 696   1      
 697   1          return(size);
 698   1      }
 699          
 700          
 701          /*******************************************************************************
 702          * Function Name: MLX90316_SPIM_GetTxBufferSize
 703          ********************************************************************************
 704          *
 705          * Summary:
 706          *  Returns the number of bytes/words of data currently held in the TX buffer.
 707          *  If TX Software Buffer not used then function return 0 - if FIFO empty, 1 - if
 708          *  FIFO not full, 4 - if FIFO full. In another case function return size of TX
 709          *  Software Buffer.
 710          *
 711          * Parameters:
 712          *  None.
 713          *
 714          * Return:
 715          *  Integer count of the number of bytes/words in the TX buffer.
 716          *
 717          * Global variables:
 718          *  MLX90316_SPIM_txBufferWrite - used for the account of the bytes which
 719          *  have been written down in the TX software buffer.
 720          *  MLX90316_SPIM_txBufferRead - used for the account of the bytes which
 721          *  have been read from the TX software buffer.
 722          *
 723          * Side Effects:
 724          *  Clear status register of the component.
 725          *
 726          *******************************************************************************/
 727          uint8  MLX90316_SPIM_GetTxBufferSize(void) 
 728          {
 729   1          uint8 size;
 730   1      
 731   1          #if(MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED)
 732   1              /* Disable TX interrupt to protect global veriables */
 733   1              MLX90316_SPIM_DisableTxInt();
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 13  

 734   1      
 735   1              if(MLX90316_SPIM_txBufferRead == MLX90316_SPIM_txBufferWrite)
 736   1              {
 737   2                  size = 0u;
 738   2              }
 739   1              else if(MLX90316_SPIM_txBufferRead < MLX90316_SPIM_txBufferWrite)
 740   1              {
 741   2                  size = (MLX90316_SPIM_txBufferWrite - MLX90316_SPIM_txBufferRead);
 742   2              }
 743   1              else
 744   1              {
 745   2                  size = (MLX90316_SPIM_TX_BUFFER_SIZE - MLX90316_SPIM_txBufferRead) + MLX90316_SPIM_txBufferWri
             -te;
 746   2              }
 747   1      
 748   1              MLX90316_SPIM_EnableTxInt();
 749   1      
 750   1          #else
              
                      size = MLX90316_SPIM_TX_STATUS_REG;
              
                      if(0u != (size & MLX90316_SPIM_STS_TX_FIFO_EMPTY))
                      {
                          size = 0u;
                      }
                      else if(0u != (size & MLX90316_SPIM_STS_TX_FIFO_NOT_FULL))
                      {
                          size = 1u;
                      }
                      else
                      {
                          size = MLX90316_SPIM_FIFO_SIZE;
                      }
              
                  #endif /* (MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED) */
 768   1      
 769   1          return(size);
 770   1      }
 771          
 772          
 773          /*******************************************************************************
 774          * Function Name: MLX90316_SPIM_ClearRxBuffer
 775          ********************************************************************************
 776          *
 777          * Summary:
 778          *  Clear the RX RAM buffer by setting the read and write pointers both to zero.
 779          *
 780          * Parameters:
 781          *  None.
 782          *
 783          * Return:
 784          *  None.
 785          *
 786          * Global variables:
 787          *  MLX90316_SPIM_rxBufferWrite - used for the account of the bytes which
 788          *  have been written down in the RX software buffer, modified every function
 789          *  call - resets to zero.
 790          *  MLX90316_SPIM_rxBufferRead - used for the account of the bytes which
 791          *  have been read from the RX software buffer, modified every function call -
 792          *  resets to zero.
 793          *
 794          * Theory:
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 14  

 795          *  Setting the pointers to zero makes the system believe there is no data to
 796          *  read and writing will resume at address 0 overwriting any data that may have
 797          *  remained in the RAM.
 798          *
 799          * Side Effects:
 800          *  Any received data not read from the RAM buffer will be lost when overwritten.
 801          *
 802          * Reentrant:
 803          *  No.
 804          *
 805          *******************************************************************************/
 806          void MLX90316_SPIM_ClearRxBuffer(void) 
 807          {
 808   1          /* Clear Hardware RX FIFO */
 809   1          while(0u !=(MLX90316_SPIM_RX_STATUS_REG & MLX90316_SPIM_STS_RX_FIFO_NOT_EMPTY))
 810   1          {
 811   2              (void) CY_GET_REG8(MLX90316_SPIM_RXDATA_PTR);
 812   2          }
 813   1      
 814   1          #if(MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED)
 815   1              /* Disable RX interrupt to protect global veriables */
 816   1              MLX90316_SPIM_DisableRxInt();
 817   1      
 818   1              MLX90316_SPIM_rxBufferFull  = 0u;
 819   1              MLX90316_SPIM_rxBufferRead  = 0u;
 820   1              MLX90316_SPIM_rxBufferWrite = 0u;
 821   1      
 822   1              MLX90316_SPIM_EnableRxInt();
 823   1          #endif /* (MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED) */
 824   1      }
 825          
 826          
 827          /*******************************************************************************
 828          * Function Name: MLX90316_SPIM_ClearTxBuffer
 829          ********************************************************************************
 830          *
 831          * Summary:
 832          *  Clear the TX RAM buffer by setting the read and write pointers both to zero.
 833          *
 834          * Parameters:
 835          *  None.
 836          *
 837          * Return:
 838          *  None.
 839          *
 840          * Global variables:
 841          *  MLX90316_SPIM_txBufferWrite - used for the account of the bytes which
 842          *  have been written down in the TX software buffer, modified every function
 843          *  call - resets to zero.
 844          *  MLX90316_SPIM_txBufferRead - used for the account of the bytes which
 845          *  have been read from the TX software buffer, modified every function call -
 846          *  resets to zero.
 847          *
 848          * Theory:
 849          *  Setting the pointers to zero makes the system believe there is no data to
 850          *  read and writing will resume at address 0 overwriting any data that may have
 851          *  remained in the RAM.
 852          *
 853          * Side Effects:
 854          *  Any data not yet transmitted from the RAM buffer will be lost when
 855          *  overwritten.
 856          *
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 15  

 857          * Reentrant:
 858          *  No.
 859          *
 860          *******************************************************************************/
 861          void MLX90316_SPIM_ClearTxBuffer(void) 
 862          {
 863   1          uint8 enableInterrupts;
 864   1      
 865   1          enableInterrupts = CyEnterCriticalSection();
 866   1          /* Clear TX FIFO */
 867   1          MLX90316_SPIM_AUX_CONTROL_DP0_REG |= ((uint8)  MLX90316_SPIM_TX_FIFO_CLR);
 868   1          MLX90316_SPIM_AUX_CONTROL_DP0_REG &= ((uint8) ~MLX90316_SPIM_TX_FIFO_CLR);
 869   1      
 870   1          #if(MLX90316_SPIM_USE_SECOND_DATAPATH)
                      /* Clear TX FIFO for 2nd Datapath */
                      MLX90316_SPIM_AUX_CONTROL_DP1_REG |= ((uint8)  MLX90316_SPIM_TX_FIFO_CLR);
                      MLX90316_SPIM_AUX_CONTROL_DP1_REG &= ((uint8) ~MLX90316_SPIM_TX_FIFO_CLR);
                  #endif /* (MLX90316_SPIM_USE_SECOND_DATAPATH) */
 875   1          CyExitCriticalSection(enableInterrupts);
 876   1      
 877   1          #if(MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED)
 878   1              /* Disable TX interrupt to protect global veriables */
 879   1              MLX90316_SPIM_DisableTxInt();
 880   1      
 881   1              MLX90316_SPIM_txBufferFull  = 0u;
 882   1              MLX90316_SPIM_txBufferRead  = 0u;
 883   1              MLX90316_SPIM_txBufferWrite = 0u;
 884   1      
 885   1              /* Buffer is EMPTY: disable TX FIFO NOT FULL interrupt */
 886   1              MLX90316_SPIM_TX_STATUS_MASK_REG &= ((uint8) ~MLX90316_SPIM_STS_TX_FIFO_NOT_FULL);
 887   1      
 888   1              MLX90316_SPIM_EnableTxInt();
 889   1          #endif /* (MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED) */
 890   1      }
 891          
 892          
 893          #if(0u != MLX90316_SPIM_BIDIRECTIONAL_MODE)
                  /*******************************************************************************
                  * Function Name: MLX90316_SPIM_TxEnable
                  ********************************************************************************
                  *
                  * Summary:
                  *  If the SPI master is configured to use a single bi-directional pin then this
                  *  will set the bi-directional pin to transmit.
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  void MLX90316_SPIM_TxEnable(void) 
                  {
                      MLX90316_SPIM_CONTROL_REG |= MLX90316_SPIM_CTRL_TX_SIGNAL_EN;
                  }
              
              
                  /*******************************************************************************
                  * Function Name: MLX90316_SPIM_TxDisable
                  ********************************************************************************
                  *
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 16  

                  * Summary:
                  *  If the SPI master is configured to use a single bi-directional pin then this
                  *  will set the bi-directional pin to receive.
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  void MLX90316_SPIM_TxDisable(void) 
                  {
                      MLX90316_SPIM_CONTROL_REG &= ((uint8) ~MLX90316_SPIM_CTRL_TX_SIGNAL_EN);
                  }
              
              #endif /* (0u != MLX90316_SPIM_BIDIRECTIONAL_MODE) */
 936          
 937          
 938          /*******************************************************************************
 939          * Function Name: MLX90316_SPIM_PutArray
 940          ********************************************************************************
 941          *
 942          * Summary:
 943          *  Write available data from ROM/RAM to the TX buffer while space is available
 944          *  in the TX buffer. Keep trying until all data is passed to the TX buffer.
 945          *
 946          * Parameters:
 947          *  *buffer: Pointer to the location in RAM containing the data to send
 948          *  byteCount: The number of bytes to move to the transmit buffer.
 949          *
 950          * Return:
 951          *  None.
 952          *
 953          * Side Effects:
 954          *  Will stay in this routine until all data has been sent.  May get locked in
 955          *  this loop if data is not being initiated by the master if there is not
 956          *  enough room in the TX FIFO.
 957          *
 958          * Reentrant:
 959          *  No.
 960          *
 961          *******************************************************************************/
 962          void MLX90316_SPIM_PutArray(const uint8 buffer[], uint8 byteCount)
 963                                                                                    
 964          {
 965   1          uint8 bufIndex;
 966   1      
 967   1          bufIndex = 0u;
 968   1      
 969   1          while(byteCount > 0u)
 970   1          {
 971   2              MLX90316_SPIM_WriteTxData(buffer[bufIndex]);
 972   2              bufIndex++;
 973   2              byteCount--;
 974   2          }
 975   1      }
 976          
 977          
 978          /*******************************************************************************
 979          * Function Name: MLX90316_SPIM_ClearFIFO
 980          ********************************************************************************
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 17  

 981          *
 982          * Summary:
 983          *  Clear the RX and TX FIFO's of all data for a fresh start.
 984          *
 985          * Parameters:
 986          *  None.
 987          *
 988          * Return:
 989          *  None.
 990          *
 991          * Side Effects:
 992          *  Clear status register of the component.
 993          *
 994          *******************************************************************************/
 995          void MLX90316_SPIM_ClearFIFO(void) 
 996          {
 997   1          uint8 enableInterrupts;
 998   1      
 999   1          /* Clear Hardware RX FIFO */
1000   1          while(0u !=(MLX90316_SPIM_RX_STATUS_REG & MLX90316_SPIM_STS_RX_FIFO_NOT_EMPTY))
1001   1          {
1002   2              (void) CY_GET_REG8(MLX90316_SPIM_RXDATA_PTR);
1003   2          }
1004   1      
1005   1          enableInterrupts = CyEnterCriticalSection();
1006   1          /* Clear TX FIFO */
1007   1          MLX90316_SPIM_AUX_CONTROL_DP0_REG |= ((uint8)  MLX90316_SPIM_TX_FIFO_CLR);
1008   1          MLX90316_SPIM_AUX_CONTROL_DP0_REG &= ((uint8) ~MLX90316_SPIM_TX_FIFO_CLR);
1009   1      
1010   1          #if(MLX90316_SPIM_USE_SECOND_DATAPATH)
                      /* Clear TX FIFO for 2nd Datapath */
                      MLX90316_SPIM_AUX_CONTROL_DP1_REG |= ((uint8)  MLX90316_SPIM_TX_FIFO_CLR);
                      MLX90316_SPIM_AUX_CONTROL_DP1_REG &= ((uint8) ~MLX90316_SPIM_TX_FIFO_CLR);
                  #endif /* (MLX90316_SPIM_USE_SECOND_DATAPATH) */
1015   1          CyExitCriticalSection(enableInterrupts);
1016   1      }
1017          
1018          
1019          /* Following functions are for version Compatibility, they are obsolete.
1020          *  Please do not use it in new projects.
1021          */
1022          
1023          
1024          /*******************************************************************************
1025          * Function Name: MLX90316_SPIM_EnableInt
1026          ********************************************************************************
1027          *
1028          * Summary:
1029          *  Enable internal interrupt generation.
1030          *
1031          * Parameters:
1032          *  None.
1033          *
1034          * Return:
1035          *  None.
1036          *
1037          * Theory:
1038          *  Enable the internal interrupt output -or- the interrupt component itself.
1039          *
1040          *******************************************************************************/
1041          void MLX90316_SPIM_EnableInt(void) 
1042          {
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 18  

1043   1          MLX90316_SPIM_EnableRxInt();
1044   1          MLX90316_SPIM_EnableTxInt();
1045   1      }
1046          
1047          
1048          /*******************************************************************************
1049          * Function Name: MLX90316_SPIM_DisableInt
1050          ********************************************************************************
1051          *
1052          * Summary:
1053          *  Disable internal interrupt generation.
1054          *
1055          * Parameters:
1056          *  None.
1057          *
1058          * Return:
1059          *  None.
1060          *
1061          * Theory:
1062          *  Disable the internal interrupt output -or- the interrupt component itself.
1063          *
1064          *******************************************************************************/
1065          void MLX90316_SPIM_DisableInt(void) 
1066          {
1067   1          MLX90316_SPIM_DisableTxInt();
1068   1          MLX90316_SPIM_DisableRxInt();
1069   1      }
1070          
1071          
1072          /*******************************************************************************
1073          * Function Name: MLX90316_SPIM_SetInterruptMode
1074          ********************************************************************************
1075          *
1076          * Summary:
1077          *  Configure which status bits trigger an interrupt event.
1078          *
1079          * Parameters:
1080          *  intSrc: An or'd combination of the desired status bit masks (defined in the
1081          *  header file).
1082          *
1083          * Return:
1084          *  None.
1085          *
1086          * Theory:
1087          *  Enables the output of specific status bits to the interrupt controller.
1088          *
1089          *******************************************************************************/
1090          void MLX90316_SPIM_SetInterruptMode(uint8 intSrc) 
1091          {
1092   1          MLX90316_SPIM_TX_STATUS_MASK_REG  = (intSrc & ((uint8) ~MLX90316_SPIM_STS_SPI_IDLE));
1093   1          MLX90316_SPIM_RX_STATUS_MASK_REG  =  intSrc;
1094   1      }
1095          
1096          
1097          /*******************************************************************************
1098          * Function Name: MLX90316_SPIM_ReadStatus
1099          ********************************************************************************
1100          *
1101          * Summary:
1102          *  Read the status register for the component.
1103          *
1104          * Parameters:
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 19  

1105          *  None.
1106          *
1107          * Return:
1108          *  Contents of the status register.
1109          *
1110          * Global variables:
1111          *  MLX90316_SPIM_swStatus - used to store in software status register,
1112          *  modified every function call - resets to zero.
1113          *
1114          * Theory:
1115          *  Allows the user and the API to read the status register for error detection
1116          *  and flow control.
1117          *
1118          * Side Effects:
1119          *  Clear status register of the component.
1120          *
1121          * Reentrant:
1122          *  No.
1123          *
1124          *******************************************************************************/
1125          uint8 MLX90316_SPIM_ReadStatus(void) 
1126          {
1127   1          uint8 tmpStatus;
1128   1      
1129   1          #if(MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED || MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED)
1130   1      
1131   1              MLX90316_SPIM_DisableInt();
1132   1      
1133   1              tmpStatus  = MLX90316_SPIM_GET_STATUS_RX(MLX90316_SPIM_swStatusRx);
1134   1              tmpStatus |= MLX90316_SPIM_GET_STATUS_TX(MLX90316_SPIM_swStatusTx);
1135   1              tmpStatus &= ((uint8) ~MLX90316_SPIM_STS_SPI_IDLE);
1136   1      
1137   1              MLX90316_SPIM_swStatusTx = 0u;
1138   1              MLX90316_SPIM_swStatusRx = 0u;
1139   1      
1140   1              MLX90316_SPIM_EnableInt();
1141   1      
1142   1          #else
              
                      tmpStatus  = MLX90316_SPIM_RX_STATUS_REG;
                      tmpStatus |= MLX90316_SPIM_TX_STATUS_REG;
                      tmpStatus &= ((uint8) ~MLX90316_SPIM_STS_SPI_IDLE);
              
                  #endif /* (MLX90316_SPIM_TX_SOFTWARE_BUF_ENABLED || MLX90316_SPIM_RX_SOFTWARE_BUF_ENABLED) */
1149   1      
1150   1          return(tmpStatus);
1151   1      }
1152          
1153          
1154          /* [] END OF FILE */
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 20  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION MLX90316_SPIM_Init (BEGIN)
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 66
0000 90658A            MOV     DPTR,#0658AH
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
0006 9044C8            MOV     DPTR,#044C8H
0009 7402              MOV     A,#02H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 71
000C 7D07              MOV     R5,#07H
000E 7F01              MOV     R7,#01H
0010 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 72
0013 7C00        E     MOV     R4,#HIGH MLX90316_SPIM_TX_ISR
0015 7D00        E     MOV     R5,#LOW MLX90316_SPIM_TX_ISR
0017 7F01              MOV     R7,#01H
0019 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 77
001C 9044C8            MOV     DPTR,#044C8H
001F 7401              MOV     A,#01H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
0022 7D07              MOV     R5,#07H
0024 7F00              MOV     R7,#00H
0026 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 79
0029 7C00        E     MOV     R4,#HIGH MLX90316_SPIM_RX_ISR
002B 7D00        E     MOV     R5,#LOW MLX90316_SPIM_RX_ISR
002D 7F00              MOV     R7,#00H
002F 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 83
0032 120000      R     LCALL   MLX90316_SPIM_ClearFIFO
                                           ; SOURCE LINE # 86
0035 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferFull
0038 E4                CLR     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
003A 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferRead
003D E4                CLR     A
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
003F 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferWrite
0042 E4                CLR     A
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
0044 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferFull
0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
0049 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
004C E4                CLR     A
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
004E 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
0051 E4                CLR     A
0052 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 21  

                                           ; SOURCE LINE # 97
0053 120000      R     LCALL   MLX90316_SPIM_ReadTxStatus
                                           ; SOURCE LINE # 98
0056 120000      R     LCALL   MLX90316_SPIM_ReadRxStatus
                                           ; SOURCE LINE # 101
0059 906589            MOV     DPTR,#06589H
005C E4                CLR     A
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
005E 90658B            MOV     DPTR,#0658BH
0061 7420              MOV     A,#020H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
0064 22                RET     
             ; FUNCTION MLX90316_SPIM_Init (END)

             ; FUNCTION MLX90316_SPIM_Enable (BEGIN)
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 124
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
0008 90659A            MOV     DPTR,#0659AH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4420              ORL     A,#020H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0013 906599            MOV     DPTR,#06599H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4410              ORL     A,#010H
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
001E 90659B            MOV     DPTR,#0659BH
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 4410              ORL     A,#010H
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0029 900000      R     MOV     DPTR,#enableInterrupts
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 134
0031 120000      R     LCALL   MLX90316_SPIM_EnableTxInt
                                           ; SOURCE LINE # 135
0034 120000      R     LCALL   MLX90316_SPIM_EnableRxInt
                                           ; SOURCE LINE # 136
0037 22                RET     
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 22  

             ; FUNCTION MLX90316_SPIM_Enable (END)

             ; FUNCTION MLX90316_SPIM_Start (BEGIN)
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
0000 900000      R     MOV     DPTR,#MLX90316_SPIM_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
0008 120000      R     LCALL   MLX90316_SPIM_Init
                                           ; SOURCE LINE # 168
000B 900000      R     MOV     DPTR,#MLX90316_SPIM_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0011         ?C0003:
                                           ; SOURCE LINE # 171
0011 120000      R     LCALL   MLX90316_SPIM_Enable
                                           ; SOURCE LINE # 172
0014 22                RET     
             ; FUNCTION MLX90316_SPIM_Start (END)

             ; FUNCTION MLX90316_SPIM_Stop (BEGIN)
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 196
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
0008 906599            MOV     DPTR,#06599H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54EF              ANL     A,#0EFH
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
0013 90659B            MOV     DPTR,#0659BH
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54EF              ANL     A,#0EFH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
001E 900000      R     MOV     DPTR,#enableInterrupts
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 205
0026 120000      R     LCALL   MLX90316_SPIM_DisableTxInt
                                           ; SOURCE LINE # 206
0029 120000      R     LCALL   MLX90316_SPIM_DisableRxInt
                                           ; SOURCE LINE # 207
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 23  

002C 22                RET     
             ; FUNCTION MLX90316_SPIM_Stop (END)

             ; FUNCTION MLX90316_SPIM_EnableTxInt (BEGIN)
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 230
0000 9044C0            MOV     DPTR,#044C0H
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
0006 22                RET     
             ; FUNCTION MLX90316_SPIM_EnableTxInt (END)

             ; FUNCTION MLX90316_SPIM_EnableRxInt (BEGIN)
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 255
0000 9044C0            MOV     DPTR,#044C0H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
0006 22                RET     
             ; FUNCTION MLX90316_SPIM_EnableRxInt (END)

             ; FUNCTION MLX90316_SPIM_DisableTxInt (BEGIN)
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 280
0000 9044C8            MOV     DPTR,#044C8H
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 282
0006 22                RET     
             ; FUNCTION MLX90316_SPIM_DisableTxInt (END)

             ; FUNCTION MLX90316_SPIM_DisableRxInt (BEGIN)
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 305
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 307
0006 22                RET     
             ; FUNCTION MLX90316_SPIM_DisableRxInt (END)

             ; FUNCTION _MLX90316_SPIM_SetTxInterruptMode (BEGIN)
                                           ; SOURCE LINE # 328
0000 900000      R     MOV     DPTR,#intSrc
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
0005 900000      R     MOV     DPTR,#intSrc
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906589            MOV     DPTR,#06589H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 331
000F 22                RET     
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 24  

             ; FUNCTION _MLX90316_SPIM_SetTxInterruptMode (END)

             ; FUNCTION _MLX90316_SPIM_SetRxInterruptMode (BEGIN)
                                           ; SOURCE LINE # 352
0000 900000      R     MOV     DPTR,#intSrc
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
0005 900000      R     MOV     DPTR,#intSrc
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 90658B            MOV     DPTR,#0658BH
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
000F 22                RET     
             ; FUNCTION _MLX90316_SPIM_SetRxInterruptMode (END)

             ; FUNCTION MLX90316_SPIM_ReadTxStatus (BEGIN)
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 392
0000 120000      R     LCALL   MLX90316_SPIM_DisableTxInt
                                           ; SOURCE LINE # 394
0003 900000      R     MOV     DPTR,#MLX90316_SPIM_swStatusTx
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 5409              ANL     A,#09H
000B FF                MOV     R7,A
000C 906569            MOV     DPTR,#06569H
000F E0                MOVX    A,@DPTR
0010 FE                MOV     R6,A
0011 EF                MOV     A,R7
0012 4E                ORL     A,R6
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#tmpStatus
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
0019 900000      R     MOV     DPTR,#MLX90316_SPIM_swStatusTx
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
001E 120000      R     LCALL   MLX90316_SPIM_EnableTxInt
                                           ; SOURCE LINE # 405
0021 900000      R     MOV     DPTR,#tmpStatus
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
                                           ; SOURCE LINE # 406
0026         ?C0012:
0026 22                RET     
             ; FUNCTION MLX90316_SPIM_ReadTxStatus (END)

             ; FUNCTION MLX90316_SPIM_ReadRxStatus (BEGIN)
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 443
0000 120000      R     LCALL   MLX90316_SPIM_DisableRxInt
                                           ; SOURCE LINE # 445
0003 900000      R     MOV     DPTR,#MLX90316_SPIM_swStatusRx
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 25  

0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 5440              ANL     A,#040H
000B FF                MOV     R7,A
000C 90656B            MOV     DPTR,#0656BH
000F E0                MOVX    A,@DPTR
0010 FE                MOV     R6,A
0011 EF                MOV     A,R7
0012 4E                ORL     A,R6
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#tmpStatus
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
0019 900000      R     MOV     DPTR,#MLX90316_SPIM_swStatusRx
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
001E 120000      R     LCALL   MLX90316_SPIM_EnableRxInt
                                           ; SOURCE LINE # 456
0021 900000      R     MOV     DPTR,#tmpStatus
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
                                           ; SOURCE LINE # 457
0026         ?C0013:
0026 22                RET     
             ; FUNCTION MLX90316_SPIM_ReadRxStatus (END)

             ; FUNCTION _MLX90316_SPIM_WriteTxData (BEGIN)
                                           ; SOURCE LINE # 494
0000 900000      R     MOV     DPTR,#txData
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 495
0005         ?C0016:
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
0005 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#tmpTxBufferRead
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 505
000F 900000      R     MOV     DPTR,#tmpTxBufferRead
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 7008              JNZ     ?C0017
                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
0017 900000      R     MOV     DPTR,#tmpTxBufferRead
001A 7409              MOV     A,#09H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
001D 8006              SJMP    ?C0014
001F         ?C0017:
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
001F 900000      R     MOV     DPTR,#tmpTxBufferRead
0022 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 26  

0023 14                DEC     A
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 514
0025         ?C0014:
0025 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#tmpTxBufferRead
002D E0                MOVX    A,@DPTR
002E FE                MOV     R6,A
002F EE                MOV     A,R6
0030 6F                XRL     A,R7
0031 60D2              JZ      ?C0016
                                           ; SOURCE LINE # 517
0033 120000      R     LCALL   MLX90316_SPIM_DisableTxInt
                                           ; SOURCE LINE # 519
0036 900000      R     MOV     DPTR,#MLX90316_SPIM_swStatusTx
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C 5409              ANL     A,#09H
003E FF                MOV     R7,A
003F 906569            MOV     DPTR,#06569H
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 EF                MOV     A,R7
0045 4E                ORL     A,R6
0046 FF                MOV     R7,A
0047 900000      R     MOV     DPTR,#tempStatus
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
004C 900000      R     MOV     DPTR,#tempStatus
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#MLX90316_SPIM_swStatusTx
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
0056 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
005E E0                MOVX    A,@DPTR
005F FE                MOV     R6,A
0060 EE                MOV     A,R6
0061 B50715            CJNE    A,AR7,?C0019
0064 900000      R     MOV     DPTR,#MLX90316_SPIM_swStatusTx
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 EF                MOV     A,R7
006A 30E20C            JNB     ACC.2,?C0019
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 527
006D 900000      R     MOV     DPTR,#txData
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 90654A            MOV     DPTR,#0654AH
0075 EF                MOV     A,R7
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 27  

0077 8061              SJMP    ?C0020
0079         ?C0019:
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 532
0079 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
007C E0                MOVX    A,@DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
007F 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 C3                CLR     C
0086 940A              SUBB    A,#0AH
0088 4005              JC      ?C0021
                                           ; SOURCE LINE # 534
                                           ; SOURCE LINE # 535
008A 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
008D E4                CLR     A
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
008F         ?C0021:
                                           ; SOURCE LINE # 538
008F 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
0097 E0                MOVX    A,@DPTR
0098 FE                MOV     R6,A
0099 EE                MOV     A,R6
009A B5071C            CJNE    A,AR7,?C0022
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
009D 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
00A0 E0                MOVX    A,@DPTR
00A1 04                INC     A
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
00A3 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 EF                MOV     A,R7
00A9 C3                CLR     C
00AA 940A              SUBB    A,#0AH
00AC 4005              JC      ?C0023
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 543
00AE 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
00B1 E4                CLR     A
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 544
00B3         ?C0023:
                                           ; SOURCE LINE # 545
00B3 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferFull
00B6 7401              MOV     A,#01H
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
00B9         ?C0022:
                                           ; SOURCE LINE # 548
00B9 900000      R     MOV     DPTR,#txData
00BC E0                MOVX    A,@DPTR
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 28  

00BD FF                MOV     R7,A
00BE 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
00C1 E0                MOVX    A,@DPTR
00C2 FE                MOV     R6,A
00C3 7400        R     MOV     A,#LOW MLX90316_SPIM_txBuffer
00C5 2E                ADD     A,R6
00C6 F582              MOV     DPL,A
00C8 E4                CLR     A
00C9 3400        R     ADDC    A,#HIGH MLX90316_SPIM_txBuffer
00CB F583              MOV     DPH,A
00CD EF                MOV     A,R7
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
00CF 906589            MOV     DPTR,#06589H
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 EF                MOV     A,R7
00D5 4404              ORL     A,#04H
00D7 FF                MOV     R7,A
00D8 EF                MOV     A,R7
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 551
00DA         ?C0020:
                                           ; SOURCE LINE # 553
00DA 120000      R     LCALL   MLX90316_SPIM_EnableTxInt
                                           ; SOURCE LINE # 565
00DD 22                RET     
             ; FUNCTION _MLX90316_SPIM_WriteTxData (END)

             ; FUNCTION MLX90316_SPIM_ReadRxData (BEGIN)
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 609
0000 120000      R     LCALL   MLX90316_SPIM_DisableRxInt
                                           ; SOURCE LINE # 611
0003 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferWrite
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferRead
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D EE                MOV     A,R6
000E 6F                XRL     A,R7
000F 6025              JZ      ?C0025
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
0011 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferFull
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 7018              JNZ     ?C0026
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 615
0019 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferRead
001C E0                MOVX    A,@DPTR
001D 04                INC     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 616
001F 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferRead
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 29  

0025 C3                CLR     C
0026 940A              SUBB    A,#0AH
0028 400C              JC      ?C0025
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
002A 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferRead
002D E4                CLR     A
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
                                           ; SOURCE LINE # 620
002F 8005              SJMP    ?C0025
0031         ?C0026:
                                           ; SOURCE LINE # 622
                                           ; SOURCE LINE # 623
0031 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferFull
0034 E4                CLR     A
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 624
                                           ; SOURCE LINE # 625
0036         ?C0025:
                                           ; SOURCE LINE # 627
0036 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferRead
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 7400        R     MOV     A,#LOW MLX90316_SPIM_rxBuffer
003D 2F                ADD     A,R7
003E F582              MOV     DPL,A
0040 E4                CLR     A
0041 3400        R     ADDC    A,#HIGH MLX90316_SPIM_rxBuffer
0043 F583              MOV     DPH,A
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 900000      R     MOV     DPTR,#rxData
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 629
004C 120000      R     LCALL   MLX90316_SPIM_EnableRxInt
                                           ; SOURCE LINE # 637
004F 900000      R     MOV     DPTR,#rxData
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
                                           ; SOURCE LINE # 638
0054         ?C0029:
0054 22                RET     
             ; FUNCTION MLX90316_SPIM_ReadRxData (END)

             ; FUNCTION MLX90316_SPIM_GetRxBufferSize (BEGIN)
                                           ; SOURCE LINE # 666
                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 673
0000 120000      R     LCALL   MLX90316_SPIM_DisableRxInt
                                           ; SOURCE LINE # 675
0003 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferWrite
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferRead
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D EE                MOV     A,R6
000E B50707            CJNE    A,AR7,?C0030
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 30  

0011 900000      R     MOV     DPTR,#size
0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 678
0016 803B              SJMP    ?C0031
0018         ?C0030:
                                           ; SOURCE LINE # 679
0018 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferWrite
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferRead
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 EE                MOV     A,R6
0023 C3                CLR     C
0024 9F                SUBB    A,R7
0025 5015              JNC     ?C0032
                                           ; SOURCE LINE # 680
                                           ; SOURCE LINE # 681
0027 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferRead
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferWrite
002F E0                MOVX    A,@DPTR
0030 FE                MOV     R6,A
0031 C3                CLR     C
0032 EE                MOV     A,R6
0033 9F                SUBB    A,R7
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#size
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 682
003A 8017              SJMP    ?C0031
003C         ?C0032:
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
003C 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferRead
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 C3                CLR     C
0042 740A              MOV     A,#0AH
0044 9F                SUBB    A,R7
0045 FF                MOV     R7,A
0046 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferWrite
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B EF                MOV     A,R7
004C 2E                ADD     A,R6
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#size
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 686
0053         ?C0031:
                                           ; SOURCE LINE # 688
0053 120000      R     LCALL   MLX90316_SPIM_EnableRxInt
                                           ; SOURCE LINE # 697
0056 900000      R     MOV     DPTR,#size
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
                                           ; SOURCE LINE # 698
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 31  

005B         ?C0034:
005B 22                RET     
             ; FUNCTION MLX90316_SPIM_GetRxBufferSize (END)

             ; FUNCTION MLX90316_SPIM_GetTxBufferSize (BEGIN)
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 733
0000 120000      R     LCALL   MLX90316_SPIM_DisableTxInt
                                           ; SOURCE LINE # 735
0003 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D EE                MOV     A,R6
000E B50707            CJNE    A,AR7,?C0035
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
0011 900000      R     MOV     DPTR,#size
0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 738
0016 803B              SJMP    ?C0036
0018         ?C0035:
                                           ; SOURCE LINE # 739
0018 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 EE                MOV     A,R6
0023 C3                CLR     C
0024 9F                SUBB    A,R7
0025 5015              JNC     ?C0037
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 741
0027 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
002F E0                MOVX    A,@DPTR
0030 FE                MOV     R6,A
0031 C3                CLR     C
0032 EE                MOV     A,R6
0033 9F                SUBB    A,R7
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#size
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 742
003A 8017              SJMP    ?C0036
003C         ?C0037:
                                           ; SOURCE LINE # 744
                                           ; SOURCE LINE # 745
003C 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 C3                CLR     C
0042 740A              MOV     A,#0AH
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 32  

0044 9F                SUBB    A,R7
0045 FF                MOV     R7,A
0046 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B EF                MOV     A,R7
004C 2E                ADD     A,R6
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#size
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 746
0053         ?C0036:
                                           ; SOURCE LINE # 748
0053 120000      R     LCALL   MLX90316_SPIM_EnableTxInt
                                           ; SOURCE LINE # 769
0056 900000      R     MOV     DPTR,#size
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
                                           ; SOURCE LINE # 770
005B         ?C0039:
005B 22                RET     
             ; FUNCTION MLX90316_SPIM_GetTxBufferSize (END)

             ; FUNCTION MLX90316_SPIM_ClearRxBuffer (BEGIN)
                                           ; SOURCE LINE # 806
                                           ; SOURCE LINE # 807
0000         ?C0040:
                                           ; SOURCE LINE # 809
0000 90656B            MOV     DPTR,#0656BH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E507            JNB     ACC.5,?C0041
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 811
0009 90655A            MOV     DPTR,#0655AH
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
                                           ; SOURCE LINE # 812
000E 80F0              SJMP    ?C0040
0010         ?C0041:
                                           ; SOURCE LINE # 816
0010 120000      R     LCALL   MLX90316_SPIM_DisableRxInt
                                           ; SOURCE LINE # 818
0013 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferFull
0016 E4                CLR     A
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 819
0018 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferRead
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 820
001D 900000      R     MOV     DPTR,#MLX90316_SPIM_rxBufferWrite
0020 E4                CLR     A
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 822
0022 120000      R     LCALL   MLX90316_SPIM_EnableRxInt
                                           ; SOURCE LINE # 824
0025 22                RET     
             ; FUNCTION MLX90316_SPIM_ClearRxBuffer (END)

C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 33  

             ; FUNCTION MLX90316_SPIM_ClearTxBuffer (BEGIN)
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 865
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 867
0008 90659A            MOV     DPTR,#0659AH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4401              ORL     A,#01H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 868
0013 90659A            MOV     DPTR,#0659AH
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54FE              ANL     A,#0FEH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 875
001E 900000      R     MOV     DPTR,#enableInterrupts
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 879
0026 120000      R     LCALL   MLX90316_SPIM_DisableTxInt
                                           ; SOURCE LINE # 881
0029 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferFull
002C E4                CLR     A
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 882
002E 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferRead
0031 E4                CLR     A
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 883
0033 900000      R     MOV     DPTR,#MLX90316_SPIM_txBufferWrite
0036 E4                CLR     A
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 886
0038 906589            MOV     DPTR,#06589H
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E 54FB              ANL     A,#0FBH
0040 FF                MOV     R7,A
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 888
0043 120000      R     LCALL   MLX90316_SPIM_EnableTxInt
                                           ; SOURCE LINE # 890
0046 22                RET     
             ; FUNCTION MLX90316_SPIM_ClearTxBuffer (END)

             ; FUNCTION _MLX90316_SPIM_PutArray (BEGIN)
                                           ; SOURCE LINE # 962
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 34  

0000 900000      R     MOV     DPTR,#buffer
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#byteCount
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 964
                                           ; SOURCE LINE # 967
000B 900000      R     MOV     DPTR,#bufIndex
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
0010         ?C0044:
                                           ; SOURCE LINE # 969
0010 900000      R     MOV     DPTR,#byteCount
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 D3                SETB    C
0017 9400              SUBB    A,#00H
0019 4026              JC      ?C0046
                                           ; SOURCE LINE # 970
                                           ; SOURCE LINE # 971
001B 900000      R     MOV     DPTR,#buffer
001E 120000      E     LCALL   ?C?PLDXDATA
0021 900000      R     MOV     DPTR,#bufIndex
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 E9                MOV     A,R1
0027 2F                ADD     A,R7
0028 F9                MOV     R1,A
0029 E4                CLR     A
002A 3A                ADDC    A,R2
002B FA                MOV     R2,A
002C 120000      E     LCALL   ?C?CLDPTR
002F FF                MOV     R7,A
0030 120000      R     LCALL   _MLX90316_SPIM_WriteTxData
                                           ; SOURCE LINE # 972
0033 900000      R     MOV     DPTR,#bufIndex
0036 E0                MOVX    A,@DPTR
0037 04                INC     A
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 973
0039 900000      R     MOV     DPTR,#byteCount
003C E0                MOVX    A,@DPTR
003D 14                DEC     A
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 974
003F 80CF              SJMP    ?C0044
                                           ; SOURCE LINE # 975
0041         ?C0046:
0041 22                RET     
             ; FUNCTION _MLX90316_SPIM_PutArray (END)

             ; FUNCTION MLX90316_SPIM_ClearFIFO (BEGIN)
                                           ; SOURCE LINE # 995
                                           ; SOURCE LINE # 996
0000         ?C0047:
                                           ; SOURCE LINE # 1000
0000 90656B            MOV     DPTR,#0656BH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E507            JNB     ACC.5,?C0048
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 35  

                                           ; SOURCE LINE # 1001
                                           ; SOURCE LINE # 1002
0009 90655A            MOV     DPTR,#0655AH
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
                                           ; SOURCE LINE # 1003
000E 80F0              SJMP    ?C0047
0010         ?C0048:
                                           ; SOURCE LINE # 1005
0010 120000      E     LCALL   CyEnterCriticalSection
0013 900000      R     MOV     DPTR,#enableInterrupts
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1007
0018 90659A            MOV     DPTR,#0659AH
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 4401              ORL     A,#01H
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1008
0023 90659A            MOV     DPTR,#0659AH
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 54FE              ANL     A,#0FEH
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1015
002E 900000      R     MOV     DPTR,#enableInterrupts
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1016
0036 22                RET     
             ; FUNCTION MLX90316_SPIM_ClearFIFO (END)

             ; FUNCTION MLX90316_SPIM_EnableInt (BEGIN)
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1042
                                           ; SOURCE LINE # 1043
0000 120000      R     LCALL   MLX90316_SPIM_EnableRxInt
                                           ; SOURCE LINE # 1044
0003 120000      R     LCALL   MLX90316_SPIM_EnableTxInt
                                           ; SOURCE LINE # 1045
0006 22                RET     
             ; FUNCTION MLX90316_SPIM_EnableInt (END)

             ; FUNCTION MLX90316_SPIM_DisableInt (BEGIN)
                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1067
0000 120000      R     LCALL   MLX90316_SPIM_DisableTxInt
                                           ; SOURCE LINE # 1068
0003 120000      R     LCALL   MLX90316_SPIM_DisableRxInt
                                           ; SOURCE LINE # 1069
0006 22                RET     
             ; FUNCTION MLX90316_SPIM_DisableInt (END)

C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 36  

             ; FUNCTION _MLX90316_SPIM_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 1090
0000 900000      R     MOV     DPTR,#intSrc
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1091
                                           ; SOURCE LINE # 1092
0005 900000      R     MOV     DPTR,#intSrc
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54EF              ANL     A,#0EFH
000D FF                MOV     R7,A
000E 906589            MOV     DPTR,#06589H
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1093
0013 900000      R     MOV     DPTR,#intSrc
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 90658B            MOV     DPTR,#0658BH
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1094
001D 22                RET     
             ; FUNCTION _MLX90316_SPIM_SetInterruptMode (END)

             ; FUNCTION MLX90316_SPIM_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1125
                                           ; SOURCE LINE # 1126
                                           ; SOURCE LINE # 1131
0000 120000      R     LCALL   MLX90316_SPIM_DisableInt
                                           ; SOURCE LINE # 1133
0003 900000      R     MOV     DPTR,#MLX90316_SPIM_swStatusRx
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 5440              ANL     A,#040H
000B FF                MOV     R7,A
000C 90656B            MOV     DPTR,#0656BH
000F E0                MOVX    A,@DPTR
0010 FE                MOV     R6,A
0011 EF                MOV     A,R7
0012 4E                ORL     A,R6
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#tmpStatus
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1134
0019 900000      R     MOV     DPTR,#tmpStatus
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 900000      R     MOV     DPTR,#MLX90316_SPIM_swStatusTx
0021 E0                MOVX    A,@DPTR
0022 FE                MOV     R6,A
0023 EE                MOV     A,R6
0024 5409              ANL     A,#09H
0026 FE                MOV     R6,A
0027 906569            MOV     DPTR,#06569H
002A E0                MOVX    A,@DPTR
002B FD                MOV     R5,A
002C EE                MOV     A,R6
C51 COMPILER V9.51   MLX90316_SPIM                                                         05/05/2016 04:15:49 PAGE 37  

002D 4D                ORL     A,R5
002E FE                MOV     R6,A
002F EF                MOV     A,R7
0030 4E                ORL     A,R6
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#tmpStatus
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1135
0037 900000      R     MOV     DPTR,#tmpStatus
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 54EF              ANL     A,#0EFH
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#tmpStatus
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1137
0045 900000      R     MOV     DPTR,#MLX90316_SPIM_swStatusTx
0048 E4                CLR     A
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1138
004A 900000      R     MOV     DPTR,#MLX90316_SPIM_swStatusRx
004D E4                CLR     A
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1140
004F 120000      R     LCALL   MLX90316_SPIM_EnableInt
                                           ; SOURCE LINE # 1150
0052 900000      R     MOV     DPTR,#tmpStatus
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
                                           ; SOURCE LINE # 1151
0057         ?C0053:
0057 22                RET     
             ; FUNCTION MLX90316_SPIM_ReadStatus (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1214    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     29      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
